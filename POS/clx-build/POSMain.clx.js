/*
 * App URI: PosMain
 * Source Location: PosMain.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4878), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("PosMain", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * PointOfSales.js
			 * Created at 2024. 1. 17. 오후 3:49:30.
			 *
			 * @author sunrise
			 ************************************************/

			var openWindow = null;
			/*
			 * "선택취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				var grd1 = app.lookup("grd1");
				if(confirm('선택한 행을 취소하시겠습니까?')){
					if(grd1.getCheckRowIndices().length > 0){
						grd1.deleteRow(grd1.getCheckRowIndices());
				    	alert('선택한 행이 취소되었습니다.');
						totPr();
					}else{
				    	alert('취소할 행을 선택해 주세요.');
				    }
				}
			}

			/*
			 * "전체취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(e){
				var grd1 = app.lookup("grd1");
				// 삭제할 행이 있을 경우
				if(grd1.getRowCount() > 0){
					if(confirm('전체취소를 하시겠습니까?')){
						
						app.lookup("grd1").checkAllRow();
					
						var grd1 = app.lookup("grd1");
						grd1.deleteRow(grd1.getCheckRowIndices());
						alert('전체취소 되었습니다.');
						totPr();
					}
				}else{
					alert('취소할 물품이 없습니다.');
				}
			}

			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onRdb1SelectionChange(e){
				var rdb1 = app.lookup("rdb1");
				
				var select = rdb1.getSelectionFirst().label;
				if(rdb1.value === '2'){
					rdb1.setItems(0);
					alert('카드는 일시적으로 사용이 불가합니다.');	
				}
				
			}
			function srcMemberDupl(){
				var mobPhNo = app.lookup("PH_NO");
				var membNm = app.lookup("MEMB_NM");
				var idNo = app.lookup("ID_NO");
				var busiNo = app.lookup("BUSI_NO");
				if(mobPhNo.value == '' || mobPhNo.value == null){
					alert('전화번호를 입력해 주세요.');
					mobPhNo.focus();
					return false;
				}else if(mobPhNo.length < 4 && mobPhNo.length > 0){
					alert('전화번호는 4자리 이상 입력해 주세요.');
					mobPhNo.focus();
					return false;
				}
			//	if(idNo.length < 6 && idNo.length > 0){
			//		alert('생년월일은 6자리 이상 입력해 주세요.');
			//		idNo.focus();
			//		return false;
			//	}
			//	if(busiNo.length < 10 && busiNo.length > 0){
			//		alert('사업자번호는 10자리 다 입력해 주세요.');
			//		busiNo.focus();
			//		return false;
			//	}
				return true;
			}

			/*
			 * "검색" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e){
				
				if(srcMemberDupl()){
					// Submission 생성
					var submission = new cpr.protocols.Submission();
					
					// 전송할 url 설정
					submission.action = "/POS/srcMemInfo.do";
					
					// mediaType 설정
				//	subMainList.mediaType = cpr.protocols.Submission.MEDIA_URLENCODED;
					
					// response data의 type 설정
					submission.responseType = "javascript";
				//	subMainList.async = false;
					
					var memSerNo = app.lookup("MEMB_SER_NO");
					var mobPhNo = app.lookup("PH_NO");
					var membNm = app.lookup("MEMB_NM");
					var idNo = app.lookup("ID_NO");
					var busiNo = app.lookup("BUSI_NO");
				
				//	// request data 설정
					submission.setParameters("MOB_PH_NO", mobPhNo.value);
					submission.setParameters("ID_NO", idNo.value);
					submission.setParameters("BUSI_NO", busiNo.value);
					submission.setParameters("MEMB_NM", membNm.value);
					
					submission.addEventListener("receive", function(e){
						var submi = e.control;
						console.log(submi.xhr.responseText);
						var jsonObj = JSON.parse(submi.xhr.responseText);
						
						// 받아온 회원이 없을 경우
						if(jsonObj['memberInfo'].length == 0){
							alert('회원정보가 존재하지 않습니다.');
							app.lookup("MEMB_SER_NO").value = '';
							app.lookup("MEMB_NM").value = '';
							app.lookup("ADDR_1").value = '';
							app.lookup("BUSI_NO").value = '';
							app.lookup("ID_NO").value = '';
							app.lookup("PH_NO").value = '';
							app.lookup("totalSellAmt").value = '';
							app.lookup("memPoint").value = '';
							return;
						}
						// 받아온 memberInfo 가 2명 이상일때 if 구분 후 팝업 해줘야함.
						if(jsonObj['memberInfo'].length > 1){
							console.log('검색한 멤버가 2명이상 jsonObj[memberInfo].length = ' + jsonObj['memberInfo'].length);
							alert('받아온 회원정보가 ' + jsonObj['memberInfo'].length +'명 입니다. popup')
							//	이후에 팝업창 띄우고 선택할 수 있게 뿌려주기
			//				app.lookup("memEp1").visible = true;
			//				msgWindowClick(jsonObj);
							
				openWindow = window.open("/POS/PosMainMemSrc.do", "_popup", "height=600,left=100,top=100,width=550,location=no,menubar=no,resizable=no,scrollbars=yes,status=yes,titlebar=no,toolbar=no");
							debugger
						}else if(jsonObj['memberInfo'][0]['PERS_COP_TY'] == '1'){
							idNo.value = jsonObj['memberInfo'][0]['ID_NO'];
							console.log('ID_NO = ' + jsonObj['memberInfo'][0]['ID_NO']);
						}else{
							busiNo.value = jsonObj['memberInfo'][0]['BUSI_NO'];
							console.log('BUSI_NO = ' + jsonObj['memberInfo'][0]['BUSI_NO']);
						}
						memSerNo.readOnly = false;
						memSerNo.value = jsonObj['memberInfo'][0]['MEMB_SER_NO'];
						memSerNo.readOnly = true;
						console.log('MEM_SER_NO = ' + jsonObj['memberInfo'][0]['MEMB_SER_NO']);
						mobPhNo.value = jsonObj['memberInfo'][0]['MOB_PH_NO'];
						console.log('MOB_PH_NO = ' + jsonObj['memberInfo'][0]['MOB_PH_NO']);
						membNm.value = jsonObj['memberInfo'][0]['MEMB_NM'];
						console.log('MEMB_NM = ' + jsonObj['memberInfo'][0]['MEMB_NM']);
						
						if(jsonObj['memberInfo'][0]['EMAIL'] != null){
							app.lookup("ADDR_1").value = jsonObj['memberInfo'][0]['ADDR_1'] + ' ' + jsonObj['memberInfo'][0]['ADDR_2'];
							app.lookup("MEMB_SER_NO").value = jsonObj['memberInfo'][0]['MEMB_SER_NO'];
						}
						
					});
					// 조회 Submission send
					submission.send();	
				}
			}

			// 회원popup으로 메세지 전달
			function msgWindowClick(e) {
				debugger
				openWindow = window.open("/POS/PosMainMemSrc.do", "_popup", "height=600,left=100,top=100,width=550,location=no,menubar=no,resizable=no,scrollbars=yes,status=yes,titlebar=no,toolbar=no");		
				//window 창으로 메세지 전달
			//	openWindow.postMessage(app.lookup("PH_NO").value, "*");
			}

			/*
			 * 인풋 박스에서 change 이벤트 발생 시 호출.
			 * 값이 변경 되었을때 발생하는 DOM 이벤트.
			 */
			function onBarcodeChange(e){
				

			}

			// 바코드에 해당하는 행의 인덱스를 찾는 함수
			function findRowIndexByBarcode(dataset, barcode) {
			    var sellItem = app.lookup("sellItem");
			    var rowCount = sellItem.getRowCount();
			    for (var i = 0; i < rowCount; i++) {
			        var rowData = dataset.getRowData(i);
			        console.log("Row " + i + " - BAR_CODE: " + rowData["BAR_CODE"]);
			        if (rowData["BAR_CODE"] === barcode) {
			            console.log("Barcode found at index " + i);
			            return i; // 바코드에 해당하는 행의 인덱스를 반환합니다.
			        }
			    }
			    console.log("Barcode not found");
			    return -1; // 바코드에 해당하는 행을 찾지 못한 경우 -1을 반환합니다.
			}

			/*
			 * "회원 등록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
				var button = e.control;
				if(checkValidation() === true){
					var phNo = app.lookup("PH_NO").value;
					var membNm = app.lookup("MEMB_NM").value;
					var idNo = app.lookup("ID_NO").value;
					var busiNo = app.lookup("BUSI_NO").value;
					
					debugger
					// 받아온 회원번호가 존재하는지에 대한 submission
					var submission = new cpr.protocols.Submission();
					
					submission.action = '/POS/addMember.do';
					submission.responseType = 'javascript';
					submission.setParameters("MOB_PH_NO", phNo);
					submission.setParameters("MEMB_ENG_NM", "anonymous");
					submission.setParameters("MEMB_NM", membNm);
					submission.setParameters("ID_NO", idNo);
					submission.setParameters("BUSI_NO", busiNo);
					submission.setParameters("EMAIL", "none");
					if(busiNo == ''){
						submission.setParameters("PERS_COP_TY", "1");
					}else{
						submission.setParameters("PERS_COP_TY", "2");
					}
					
			//		submission.async = false;
					submission.addEventListener("receive", function(e){
						var jsonObj = JSON.parse(e.control.xhr.responseText);
						if(jsonObj['memberInfo'].length == 0){
							alert('회원등록이 완료되었습니다.');
						}else{
							alert('이미 등록된 회원입니다.');
						}
					});
					submission.send();
					
					// 중복 회원가입이 아닌지 함수 또는 조건
			//		if(회원검색list.길이 > 1){}

				}
			}

			function checkValidation(){
				
				var phNo = app.lookup("PH_NO");
				var membNm = app.lookup("MEMB_NM");
				var idNo = app.lookup("ID_NO");
				var busiNo = app.lookup("BUSI_NO");
				
				if(phNo.value == ''){
					alert('전화번호를 입력하세요.');
					phNo.focus();
					return false;
				}
				if(phNo.value.length != 11){
					alert('전화번호가 짧습니다.');
					phNo.focus();
					return false;
				}
				if(membNm.value == ''){
					alert('이름을 입력하세요.');
					membNm.focus();
					return false;
				}
				if(membNm.value.length < 2){
					alert('이름이 짧습니다.');
					membNm.focus();
					return false;
				}
				if(idNo.value =='' && busiNo.value == ''){
					alert('주민번호를 입력하세요.');
					idNo.focus();
					return false;
				}
				if(idNo.length != 13 && idNo.length > 0){
					alert('주민등록번호가 짧습니다.');
					idNo.focus();
					return false;
				}
				if(busiNo.length != 10 && busiNo.length > 0){
					alert('사업자등록번호가 짧습니다.');
					busiNo.focus();
					return false;
				}if(idNo.value != '' && busiNo.value != ''){
					alert('주민등록과 사업자 중 하나만 입력해 주세요.');
					idNo.focus();
					return false;
				}
				return true;
			}

			/*
			 * 그리드에서 selection-dispose 이벤트 발생 시 호출.
			 * Grid의 선택행이 사라지는 경우 발생하는 이벤트. (ex. deleteRow, filter, revertData, revertRowData, commitData, showDeleteRow=false)
			 */
			function onGrd1SelectionDispose(e){
				totPr();
			}

			/*
			 * 그리드에서 update 이벤트 발생 시 호출.
			 * Grid의 행 데이터가 수정되었을 때 이벤트.
			 */
			function onGrd1Update(e){
				totPr();
				
			}

			/*
			 * "행 추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(e){
				var grd1 = app.lookup("grd1");
				var rowCount = grd1.getRowCount();
				if(rowCount == 0){
					grd1.insertRow(grd1.rowCount, true);
				}else{
					var isExistRow = grd1.getCellValue(rowCount-1, "PROD_NM");
					if(isExistRow !== ''){
						grd1.insertRow(grd1.rowCount, true);
					}else{
						grd1.selectRows(rowCount-1);
			//			grd1.selectCells({
			//				rowIndex : rowCount-1
			//				,cellIndex : "BAR_CODE"
			//			}, false);
					}
				}
				
			    
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onBarcodeValueChange2(e){
			//	onBarcodeChange(e);
				//	var dataview = new cpr.data.DataView
				var grd1 = app.lookup("grd1")
				// 값이 변경된 해당 바코드의 번호를 들고 조회 ㄱㄱ
				var barcode = grd1.getCellValue(grd1.getSelectedRowIndex(), "BAR_CODE");
				console.log(barcode);
				
			//	if(false){
				var submission = new cpr.protocols.Submission();
				submission.action = "/POS/srcProduct.do"
				submission.setParameters("BAR_CODE", barcode.toString());
				submission.async = false;
				
				// 원래 send() 위치
				submission.addEventListener("receive", function(e) {
			    	var submission = e.control;
			    	console.log(submission.xhr.responseText);    
			    	var jsonObj = JSON.parse(submission.xhr.responseText);    
			    	console.log(jsonObj);
			    	
			    	var grd1 = app.lookup("grd1"); 
			      	var sellItem = app.lookup("sellItem");
			    
			       	// 데이터셋에 추가하기 전에 기존 데이터를 모두 삭제할지 여부에 따라 결정
			       	// ds1.clear(); // 기존 데이터 모두 삭제
			       
			       	// 바코드를 기준으로 해당 행을 찾습니다.
			       	var rowIndex = findRowIndexByBarcode(sellItem, barcode);
			       	var grd1RowIndex = grd1.getSelectedRowIndex();
			        // 바코드에 해당하는 행이 있을 경우에만 데이터를 업데이트합니다.
			      	// 바코드에 해당하는 행이 있을 경우에만 데이터를 업데이트합니다.
			       	if (rowIndex !== -1) {
			        	console.log("Row index found: " + rowIndex);
			          	// 찾아온 행이 바코드를 입력한 행이 아니면 QTY +1
			          	if(grd1RowIndex !== rowIndex){
			          		var beforeQty = grd1.getCellValue(rowIndex, "QTY");
			          		var sellPr = grd1.getCellValue(rowIndex, "SELL_PR");
			          		var asellPr = grd1.getCellValue(rowIndex, "ASELL_PR");
			          		var salePr = grd1.getCellValue(rowIndex, "SALE_PR");
			          		var salesAmt = grd1.getCellValue(rowIndex, "SALES_AMT");
			          		// 가져온 rowIndex의 QTY가 1일 경우
			          		if(beforeQty === '1'){
			          			grd1.setCellValue(rowIndex, "QTY", parseInt(beforeQty)+1);
			          			grd1.setCellValue(rowIndex, "ASELL_PR", grd1.getCellValue(rowIndex, "ASELL_PR") * 2);
			          			grd1.setCellValue(rowIndex, "SALE_PR", grd1.getCellValue(rowIndex, "SALE_PR") * 2);
			          			grd1.setCellValue(rowIndex, "SALES_AMT", (grd1.getCellValue(rowIndex, "SELL_PR") * 2) - (grd1.getCellValue(rowIndex, "SALE_PR")));
			          			grd1.deleteRow(grd1RowIndex);
			          		}else{
				          		var asellPr1 = asellPr / beforeQty;
				          		var salePr1 = salePr / beforeQty;
				          		var salesAmt1 = (asellPr / beforeQty) - (salePr / beforeQty)
			          			
			          			grd1.setCellValue(rowIndex, "QTY", parseInt(beforeQty)+1);
			          			grd1.setCellValue(rowIndex, "ASELL_PR", asellPr1 * (parseInt(beforeQty)+1));
			          			grd1.setCellValue(rowIndex, "SALE_PR", salePr1 * (parseInt(beforeQty)+1));
			          			grd1.setCellValue(rowIndex, "SALES_AMT", salesAmt1 * (parseInt(beforeQty)+1));
			          			grd1.deleteRow(grd1RowIndex);
			          		}
			          		totPr();
			          	}else{
			//          		if(jsonObj["sellItem"] !== null){

					          	if (jsonObj["sellItem"] === null) {
					              	console.log("SELL_PR is null, setting SALES_AMT to 0");
					              	sellItem.setValue(rowIndex, "SALES_AMT", 0);
					              	alert('해당 상품이 없습니다.');
					          	} else {
					          		// SELL_PR 값 업데이트
					          		var sellPR = jsonObj["sellItem"]["SELL_PR"];
					          		sellItem.setValue(rowIndex, "SELL_PR", sellPR);
					              	console.log("Updating SALES_AMT with value: " + jsonObj["sellItem"]["SELL_PR"]);
					              	sellItem.setValue(rowIndex, "SALES_AMT", parseInt(jsonObj["sellItem"]["SELL_PR"] - jsonObj['sellItem']['SALE_PR']));
					              	sellItem.setValue(rowIndex, "PROD_NM", jsonObj['sellItem']['PROD_NM']);
					              	sellItem.setValue(rowIndex, "QTY", "1");
					              	sellItem.setValue(rowIndex, "ASELL_PR", jsonObj["sellItem"]["SELL_PR"]);
					              	if(jsonObj['sellItem']['SALE_OR_NOT'] == '1'){
					              		sellItem.setValue(rowIndex, "SALE_PR", jsonObj['sellItem']['SALE_PR']);
					              	}else{
					              		sellItem.setValue(rowIndex, "SALE_PR", '0');
					              	}
					          	}
			//          		}else{
			//          			alert('해당 바코드로 조회된 값이 없습니다.');
			//          		}
				          	
				    	}
			      	} else {
			          	console.log("Row index not found for barcode: " + barcode);
			          	alert('해당 상품이 없습니다.');
			      	}
			      	totPr();
			   });
				
				submission.send();
			}

			/*
			 * "계 산" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(e){
				
				var ipb12 = app.lookup("ipb12").value;
				debugger
				var grd1 = app.lookup("grd1");
				if(grd1.getCellValue(0, "PROD_NM") !== ''){
					
				if(ipb12 < 0 || ipb12.length == 0){
					alert('계산이 맞지 않습니다.');
					return false;
				}else{
					var submission = new cpr.protocols.Submission();
					var total = app.lookup("total").value;
					var membSerNo = app.lookup("MEMB_SER_NO");
					var salesTy = app.lookup("rdb1");
					
					submission.action = '/POS/calculate.do';
					submission.responseType = "javascript";
			//		submission.mediaType = "application/json";
			//		submission.async = false;
					var sms1 = app.lookup("sms1");
					var sellItem = app.lookup("sellItem");
					if(membSerNo.value != ''){
						var membTy = '1';
					}else{
						var membTy = '2';
					}
					var sellItemList = new Array();
					for(var i = 0 ; i < sellItem.getRowCount() ; i++){
						// 상품명이 없으면 row가 비었다고 판단 => List에 push 안함.
						if(sellItem.getRowData(i).PROD_NM != null){
							var sellObject = {
								BAR_CODE : sellItem.getRowData(i).BAR_CODE
								,PROD_NM : sellItem.getRowData(i).PROD_NM
								,QTY : sellItem.getRowData(i).QTY
								,SELL_PR : sellItem.getRowData(i).SELL_PR
								,ASELL_PR : sellItem.getRowData(i).ASELL_PR
								,SALE_PR : sellItem.getRowData(i).SALE_PR
								,PROD_TBL_SALES_AMT : sellItem.getRowData(i).SALES_AMT
							}
							sellItemList.push(sellObject);
						}
					}
					// 회원번호가 입력되어 있으면 회원구분에 '1'(회원)
					
					var sellItemLists = {
						sellItem : sellItemList
						,MEMB_SER_NO : membSerNo.value
						,MEMB_TY : membTy
						,PAY_TBL_SALES_AMT : total
						,TRANS_TY : salesTy.value
					}
					submission.setRequestObject(sellItemLists);
					submission.addEventListener("submit-success", function(e){
						alert('계산이 정상적으로 처리되었습니다.');
						app.lookup("sellItem").clear();
						app.lookup("product").clear();
						app.lookup("grd1").redraw();
						app.lookup("MEMB_SER_NO").value = '';
						app.lookup("MEMB_NM").value = '';
						app.lookup("ADDR_1").value = '';
						app.lookup("BUSI_NO").value = '';
						app.lookup("ID_NO").value = '';
						app.lookup("PH_NO").value = '';
						app.lookup("totalSellAmt").value = '';
						app.lookup("memPoint").value = '';
						app.lookup("total").value = '';
						app.lookup("ipb11").value = '';
						app.lookup("ipb12").value = '';
					});
					submission.send();
					
				}
				}else{
					alert('한개이상의 상품을 등록하세요');
				}
				
				
			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				var rdb = app.lookup("rdb1");
				rdb.selectItem(0);
			}

			// 합계구하는 함수
			function totPr(){
				var grd1 = app.lookup("grd1");
				// 총 금액
				var total = 0;
				for(var i = 0 ; i < grd1.rowCount ; i++){
					total += parseInt(grd1.getCellValue(i, "SALES_AMT"));
				}
				app.lookup("total").value = total;
			}

			/*
			 * 넘버 에디터에서 value-change 이벤트 발생 시 호출.
			 * NumberEditor의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onIpb11ValueChange(e){
				var total = app.lookup("total").value;
				var ipb11 = app.lookup("ipb11").value;
				var ipb12 = app.lookup("ipb12");
				ipb12.value = Number(ipb11 - total); 
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onPH_NOValueChange(e){
				
			//	if(chkDupl()){
			//		
			//	}else{
			//		return false;
			//	}
				
			}

			// 유효성검사 함수
			function chkDupl(){
				
				var phNo = app.lookup("PH_NO");
				var regExp = /[0-9]/;
				if(!regExp.test(phNo.value) && phNo.value.length > 0){
					alert('숫자만 입력해 주세요.');
					phNo.value = '';
					phNo.focus();
					return false;
				}
			}

			/*
			 * 넘버 에디터에서 value-change 이벤트 발생 시 호출.
			 * NumberEditor의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onTotalValueChange(e){
				onIpb11ValueChange(e);
			}

			var qty = 0;
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onQTYValueChange(e){
			   var grd1 = app.lookup("grd1");
			   var rowIndex = grd1.getSelectedRow().getIndex();
			   if(grd1.getCellValue(rowIndex, "PROD_NM") != ''){
			      var qtyValue = app.lookup("QTY").value;
			      var salePr = grd1.getCellValue(rowIndex, "SALE_PR");
			      if(qty === '1'){
			         var saleAmt = salePr;
			      }else{
			         var saleAmt = Number(salePr/qty);
			      }
			      grd1.updateRow(rowIndex, {
			         "QTY" : qtyValue
			         ,"ASELL_PR" : String(Number(qtyValue * grd1.getCellValue(rowIndex, "SELL_PR")))
			         ,"SALE_PR" : String(Number(qtyValue * saleAmt))
			         ,"SALES_AMT" : String(Number((qtyValue * grd1.getCellValue(rowIndex, "SELL_PR") - (qtyValue * saleAmt))))
			      });
			   }else{
			      alert('잘못된 요청입니다.');
			      grd1.deleteRow(rowIndex);
			   }
			}

			/*
			 * 인풋 박스에서 before-value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
			 */
			function onQTYBeforeValueChange(e){
				var qtyValue = app.lookup("QTY").value;
			   	qty = qtyValue;

			}

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				window.addEventListener("message", function getPostMessage(e) {
					if (app.lookup("PH_NO") != null) {
						app.lookup("PH_NO").value = e.data;
					}
				});
			}

			/*
			 * "이동" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick7(e){
				var page = "/POS/PosMainMemSrc.do";
				window.location.href = page;
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("cashRadioBtn");
			dataSet_1.parseData({
				"columns": [
					{"name": "cash"},
					{"name": "value"}
				],
				"rows": [
					{"cash": "현금", "value": "1"},
					{"cash": "카드", "value": "2"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("sellItem");
			dataSet_2.parseData({
				"columns": [
					{"name": "BAR_CODE"},
					{"name": "PROD_NM"},
					{"name": "QTY"},
					{"name": "SELL_PR"},
					{"name": "ASELL_PR"},
					{
						"name": "SALE_PR",
						"dataType": "string"
					},
					{"name": "SALES_AMT"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("product");
			dataSet_3.parseData({
				"columns" : [
					{"name": "SALE_PR"},
					{"name": "MEM_POINT"},
					{"name": "PURC_PR"},
					{"name": "PROD_ENG_NM"},
					{"name": "CLIENT_NO"},
					{"name": "PROD_CD"},
					{"name": "BAR_CODE"},
					{"name": "PROD_SIZE"},
					{"name": "SALE_OR_NOT"},
					{"name": "COLOR"},
					{"name": "PROD_CLS_CD"},
					{"name": "SELL_PR"},
					{"name": "TAXAT_TY"},
					{"name": "PROD_NM"}
				]
			});
			app.register(dataSet_3);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.async = false;
			submission_1.action = "/POS/srcProduct.do";
			submission_1.addRequestData(dataSet_2);
			submission_1.addResponseData(dataSet_2, true, "sellItem");
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.overscrollBehavior = "none";
			container.style.css({
				"border-left-color" : "black",
				"border-bottom-width" : "1px",
				"border-right-color" : "black",
				"border-right-style" : "solid",
				"border-bottom-color" : "black",
				"border-top-style" : "solid",
				"border-top-color" : "black",
				"border-left-style" : "solid",
				"border-left-width" : "1px",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("sellItem"),
				"showDeletedRow": false,
				"columns": [
					{"width": "25px"},
					{"width": "216px"},
					{"width": "168px"},
					{"width": "78px"},
					{"width": "99px"},
					{"width": "91px"},
					{"width": "92px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
								cell.filterable = false;
								cell.sortable = false;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "BAR_CODE";
								cell.text = "바코드";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_NM";
								cell.text = "상품명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "QTY";
								cell.text = "수량";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SELL_PR";
								cell.text = "단가";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "ASELL_PR";
								cell.text = "금액";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALE_PR";
								cell.text = "할인";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_AMT";
								cell.text = "판매금액";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "BAR_CODE";
								cell.control = (function(){
									var inputBox_1 = new cpr.controls.InputBox("BAR_CODE");
									inputBox_1.maxLength = 20;
									inputBox_1.inputFilter = "[0-9]";
									inputBox_1.style.css({
										"text-align" : "center"
									});
									if(typeof onBarcodeChange == "function") {
										inputBox_1.addEventListener("change", onBarcodeChange);
									}
									if(typeof onBarcodeValueChange2 == "function") {
										inputBox_1.addEventListener("value-change", onBarcodeValueChange2);
									}
									inputBox_1.bind("value").toDataColumn("BAR_CODE");
									return inputBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "PROD_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "QTY";
								cell.control = (function(){
									var inputBox_2 = new cpr.controls.InputBox("QTY");
									inputBox_2.maxLength = 6;
									inputBox_2.inputFilter = "[0-9]";
									inputBox_2.style.css({
										"text-align" : "center"
									});
									if(typeof onQTYValueChange == "function") {
										inputBox_2.addEventListener("value-change", onQTYValueChange);
									}
									if(typeof onQTYBlur == "function") {
										inputBox_2.addEventListener("blur", onQTYBlur);
									}
									if(typeof onQTYBeforeValueChange == "function") {
										inputBox_2.addEventListener("before-value-change", onQTYBeforeValueChange);
									}
									inputBox_2.bind("value").toDataColumn("QTY");
									return inputBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "SELL_PR";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("SELL_PR");
									numberEditor_1.readOnly = true;
									numberEditor_1.spinButton = false;
									numberEditor_1.format = "s#,###";
									numberEditor_1.style.css({
										"cursor" : "default",
										"text-align" : "center"
									});
									numberEditor_1.bind("value").toDataColumn("SELL_PR");
									return numberEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "ASELL_PR";
								cell.control = (function(){
									var numberEditor_2 = new cpr.controls.NumberEditor("ASELL_PR");
									numberEditor_2.readOnly = true;
									numberEditor_2.spinButton = false;
									numberEditor_2.format = "s#,###";
									numberEditor_2.style.css({
										"cursor" : "default",
										"text-align" : "center"
									});
									numberEditor_2.bind("value").toDataColumn("ASELL_PR");
									return numberEditor_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "SALE_PR";
								cell.control = (function(){
									var numberEditor_3 = new cpr.controls.NumberEditor("SALE_PR");
									numberEditor_3.readOnly = true;
									numberEditor_3.spinButton = false;
									numberEditor_3.format = "s#,###";
									numberEditor_3.style.css({
										"cursor" : "default",
										"text-align" : "center"
									});
									numberEditor_3.bind("value").toDataColumn("SALE_PR");
									return numberEditor_3;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "SALES_AMT";
								cell.control = (function(){
									var numberEditor_4 = new cpr.controls.NumberEditor("SALES_AMT");
									numberEditor_4.readOnly = true;
									numberEditor_4.spinButton = false;
									numberEditor_4.format = "s#,###";
									numberEditor_4.style.css({
										"cursor" : "default",
										"text-align" : "center"
									});
									numberEditor_4.bind("value").toDataColumn("SALES_AMT");
									return numberEditor_4;
								})();
							}
						}
					]
				}
			});
			if(typeof onGrd1Insert == "function") {
				grid_1.addEventListener("insert", onGrd1Insert);
			}
			if(typeof onGrd1SelectionDispose == "function") {
				grid_1.addEventListener("selection-dispose", onGrd1SelectionDispose);
			}
			if(typeof onGrd1Update == "function") {
				grid_1.addEventListener("update", onGrd1Update);
			}
			container.addChild(grid_1, {
				"top": "120px",
				"left": "19px",
				"width": "985px",
				"height": "358px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "선택취소";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "90px",
				"left": "760px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "전체취소";
			if(typeof onButtonClick4 == "function") {
				button_2.addEventListener("click", onButtonClick4);
			}
			container.addChild(button_2, {
				"top": "90px",
				"left": "904px",
				"width": "95px",
				"height": "20px"
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("rdb1");
			radioButton_1.readOnly = false;
			radioButton_1.enabledItemExp = "value == '1'";
			(function(radioButton_1){
				radioButton_1.setItemSet(app.lookup("cashRadioBtn"), {
					"label": "cash",
					"value": "value"
				})
			})(radioButton_1);
			if(typeof onRdb1SelectionChange == "function") {
				radioButton_1.addEventListener("selection-change", onRdb1SelectionChange);
			}
			container.addChild(radioButton_1, {
				"top": "516px",
				"left": "685px",
				"width": "200px",
				"height": "40px"
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "합계";
			hTMLSnippet_1.style.css({
				"border-radius" : "10px 0px 0px 10px",
				"background-color" : "#EDEDED",
				"vertical-align" : "middle",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_1, {
				"top": "565px",
				"left": "645px",
				"width": "90px",
				"height": "40px"
			});
			
			var hTMLSnippet_2 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_2.value = "받은 돈";
			hTMLSnippet_2.style.css({
				"border-radius" : "10px 0px 0px 10px",
				"background-color" : "#EDEDED",
				"vertical-align" : "middle",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_2, {
				"top": "615px",
				"left": "645px",
				"width": "90px",
				"height": "40px"
			});
			
			var hTMLSnippet_3 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_3.value = "거스름돈";
			hTMLSnippet_3.style.css({
				"border-radius" : "10px 0px 0px 10px",
				"background-color" : "#EDEDED",
				"vertical-align" : "middle",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_3, {
				"top": "665px",
				"left": "645px",
				"width": "90px",
				"height": "40px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "계 산";
			if(typeof onButtonClick6 == "function") {
				button_3.addEventListener("click", onButtonClick6);
			}
			container.addChild(button_3, {
				"top": "591px",
				"left": "903px",
				"width": "93px",
				"height": "83px"
			});
			
			var group_1 = new cpr.controls.Container("memInfo");
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var inputBox_3 = new cpr.controls.InputBox("MEMB_SER_NO");
				inputBox_3.readOnly = true;
				inputBox_3.inputFilter = "[0-9]";
				inputBox_3.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_3, {
					"top": "41px",
					"left": "100px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_4 = new cpr.controls.InputBox("MEMB_NM");
				inputBox_4.maxLength = 13;
				inputBox_4.inputMode = "text";
				inputBox_4.inputFilter = "[가-힣ㄱ-ㅎ]";
				inputBox_4.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_4, {
					"top": "70px",
					"left": "100px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_5 = new cpr.controls.InputBox("ADDR_1");
				inputBox_5.maxLength = 33;
				inputBox_5.inputFilter = "[0-9가-힣ㄱ-ㅎ]";
				inputBox_5.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_5, {
					"top": "99px",
					"left": "100px",
					"width": "430px",
					"height": "25px"
				});
				var inputBox_6 = new cpr.controls.InputBox("totalSellAmt");
				inputBox_6.readOnly = true;
				inputBox_6.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_6, {
					"top": "126px",
					"left": "100px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_7 = new cpr.controls.InputBox("ID_NO");
				inputBox_7.maxLength = 13;
				inputBox_7.inputFilter = "[0-9]";
				inputBox_7.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_7, {
					"top": "155px",
					"left": "100px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_8 = new cpr.controls.InputBox("BUSI_NO");
				inputBox_8.maxLength = 10;
				inputBox_8.inputFilter = "[0-9]";
				inputBox_8.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_8, {
					"top": "126px",
					"left": "380px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_9 = new cpr.controls.InputBox("memPoint");
				inputBox_9.readOnly = true;
				inputBox_9.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_9, {
					"top": "70px",
					"left": "380px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_10 = new cpr.controls.InputBox("PH_NO");
				inputBox_10.maxLength = 11;
				inputBox_10.inputMode = "tel";
				inputBox_10.inputFilter = "[0-9]";
				inputBox_10.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onPH_NOValueChange == "function") {
					inputBox_10.addEventListener("value-change", onPH_NOValueChange);
				}
				container.addChild(inputBox_10, {
					"top": "41px",
					"left": "380px",
					"width": "150px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button();
				button_4.value = "검색";
				if(typeof onButtonClick3 == "function") {
					button_4.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_4, {
					"top": "42px",
					"left": "540px",
					"width": "41px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button();
				button_5.value = "회원 등록";
				if(typeof onButtonClick2 == "function") {
					button_5.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_5, {
					"top": "11px",
					"left": "449px",
					"width": "81px",
					"height": "20px"
				});
				var hTMLSnippet_4 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_4.value = "회원 번호";
				hTMLSnippet_4.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_4, {
					"top": "41px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_5 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_5.value = "* 회원 이름";
				hTMLSnippet_5.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_5, {
					"top": "70px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_6 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_6.value = "주소";
				hTMLSnippet_6.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_6, {
					"top": "99px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_7 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_7.value = "총 판매액";
				hTMLSnippet_7.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_7, {
					"top": "126px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_8 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_8.value = "* 주민번호";
				hTMLSnippet_8.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_8, {
					"top": "155px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_9 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_9.value = "* 사업자 번호";
				hTMLSnippet_9.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_9, {
					"top": "126px",
					"left": "290px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_10 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_10.value = "회원 포인트";
				hTMLSnippet_10.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_10, {
					"top": "70px",
					"left": "290px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_11 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_11.value = "* 전화번호";
				hTMLSnippet_11.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_11, {
					"top": "41px",
					"left": "290px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_12 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_12.value = "고객 정보";
				hTMLSnippet_12.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"color" : "white",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "black",
					"border-radius" : "25px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_12, {
					"top": "10px",
					"left": "10px",
					"width": "100px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "516px",
				"left": "19px",
				"width": "590px",
				"height": "191px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			cpr.core.App.load("PosHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"left": "0px",
				"width": "1024px",
				"height": "80px"
			});
			
			var button_6 = new cpr.controls.Button();
			button_6.value = "행 추가";
			if(typeof onButtonClick5 == "function") {
				button_6.addEventListener("click", onButtonClick5);
			}
			container.addChild(button_6, {
				"top": "90px",
				"left": "586px",
				"width": "100px",
				"height": "20px"
			});
			
			var numberEditor_5 = new cpr.controls.NumberEditor("total");
			numberEditor_5.spinButton = false;
			numberEditor_5.placeholder = " ";
			numberEditor_5.displayExp = "text + ' 원'";
			numberEditor_5.style.css({
				"border-radius" : "0px 3px 3px 0px",
				"font-size" : "16px",
				"text-align" : "right"
			});
			if(typeof onTotalValueChange == "function") {
				numberEditor_5.addEventListener("value-change", onTotalValueChange);
			}
			container.addChild(numberEditor_5, {
				"top": "565px",
				"left": "735px",
				"width": "150px",
				"height": "40px"
			});
			
			var numberEditor_6 = new cpr.controls.NumberEditor("ipb11");
			numberEditor_6.spinButton = false;
			numberEditor_6.placeholder = " ";
			numberEditor_6.displayExp = "text + ' 원'";
			numberEditor_6.style.css({
				"border-radius" : "0px 3px 3px 0px",
				"font-size" : "16px",
				"text-align" : "right"
			});
			if(typeof onIpb11ValueChange == "function") {
				numberEditor_6.addEventListener("value-change", onIpb11ValueChange);
			}
			if(typeof onIpb11Input == "function") {
				numberEditor_6.addEventListener("input", onIpb11Input);
			}
			container.addChild(numberEditor_6, {
				"top": "615px",
				"left": "735px",
				"width": "150px",
				"height": "40px"
			});
			
			var numberEditor_7 = new cpr.controls.NumberEditor("ipb12");
			numberEditor_7.spinButton = false;
			numberEditor_7.placeholder = " ";
			numberEditor_7.displayExp = "text + ' 원'";
			numberEditor_7.style.css({
				"border-radius" : "0px 3px 3px 0px",
				"font-size" : "16px",
				"text-align" : "right"
			});
			container.addChild(numberEditor_7, {
				"top": "665px",
				"left": "735px",
				"width": "150px",
				"height": "40px"
			});
			
			var button_7 = new cpr.controls.Button();
			button_7.value = "이동";
			if(typeof onButtonClick7 == "function") {
				button_7.addEventListener("click", onButtonClick7);
			}
			container.addChild(button_7, {
				"top": "724px",
				"left": "362px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "PosMain";
	cpr.core.Platform.INSTANCE.register(app);
})();
